[user]
  name = Wes Turner
  email = wes@wrd.nu

[github]
  user = westurner

# References
# - http://documentup.com/skwp/git-workflows-book#appendix-a---the-gitconfig
# - [...]

[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[alias]
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk
  ac = add -p                       # stage commits chunk by chunk

  # branch
  b = branch -v                     # branch (verbose)
  ba = branch -a -v                 # branch -a (verbose)

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # fix commit message
  fc = commit --amend -m

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  ds = diff --stat
  dc = diff --cached                # diff staged changes
  dcs = diff --cached --stat
  last = diff HEAD^                 # diff last committed change
  diffw = diff --word-diff          # diff --word-diff

  # i
  i = log -n1 --decorate=full
  is = log -n1 --stat --decorate=full

  # log
  l = log --graph --date=short --name-status
  l3 = log -n3 --graph --date=short --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog = log --pretty=format:\"* %s [%h]\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  logstat = log --graph --stat
  ls = log --graph --name-status

  logfull = log --format=full --stat
  logfuller = log --format=fuller --stat
  logfullerraw = log --format=fuller --stat --raw
  lograw = log --format=raw --raw
  lf = log --format=fuller --stat --graph --show-signature
  lr = log --format=raw    --stat --graph --raw --show-signature

  # show unpushed changes
  unpushed = log --stat origin/master..HEAD
  outgoing = log --stat origin/master..HEAD

  # file overview
  fo = log --pretty=oneline --shortstat --abbrev-commit
  changes = log --graph --pretty=format:\"%Cblue%h%Creset %cr %d %Cgreen%s%Creset [%cn]\n\" --name-status
  changestat = log --graph --pretty=format:\"%Cblue%h%Creset %cr %d %Cgreen%s%Creset [%cn]\n\" --stat
  cs = log --graph --pretty=format:\"%Cblue%h%Creset %cr %d %Cgreen%s%Creset [%cn]\n\" --stat

  # pull
  pl = pull                         # pull

  # push
  ps = push                         # push

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status -sb                    # status
  st = status -sb                   # status
  stat = status  -sb                # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message
  # tagdate = tag --format=\"%ci %(taggerdate:unix) %(authorname) %s\"
  tagdate = log HEAD --tags --simplify-by-decoration --pretty=format:\"%Cblue%ct %ci%Creset%x09%Cred%D%Creset%x09%Cgreen%cn%Creset%x09%s %Cblue%G? %GS %GK%Creset\"

  tags = tagdate

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit

  # grouped search
  gg = grep --break --heading -n

  # shallow clone
  sc = clone --depth=1

  # TODO
  todo = grep -n --full-name -E 'TODO|FIXME|XXX'

[log]
  # date = iso-strict
  # date = iso
  # date = format:%F %T %z %a  # ISO8601 + day of week (man strftime)
  # date = format-local:%F %T %z %a  # ISO8601 + day of week (man strftime)
  # date = format-local:%a  # day of week
  # date = human
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset  %s  %C(magenta)[%an {%G? %GK %GS}]%Creset
# pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset%n      %s%n      %C(magenta)[%an {%G? %GK %GS}]%Creset%n
# pretty = fuller
[mergetool]
  prompt = false
[mergetool "gvimdiff"]
  cmd="gvim -c 'Gdiff' $MERGED"     # use fugitive.vim :Gdiff for 3-way merge
  keepbackup=false
[merge]
  summary = true
  verbosity = 1
  tool = gvimdiff
[apply]
  whitespace = nowarn
[branch]
  autosetupmerge = true
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = tracking
[core]
  autocrlf = false
  editor = vim
  excludesfile = ~/.gitignore_global
  pager = less -F -X
	quotepath = false
	commitGraph = true
[advice]
  statusHints = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
	tool = gvimdiff

# Upgrade github URLs to SSH
#[url "ssh://git@github.com/"]
#    insteadOf = http://github.com/
#    insteadOf = https://github.com/
#    insteadOf = git://github.com/

[cola]
	fontdiff = Monospace,10,-1,5,50,0,0,0,0,0
[gc]
	writeCommitGraph = true

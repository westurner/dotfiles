#!/usr/bin/env python
from __future__ import division
print('\n'.join(__import__('sys').path))


from pprint import pprint as pp
from pprint import pformat as pf


# from ipython_config import Venv # ... TODO

try:
    #from IPython.frontend.terminal.ipapp import launch_new_instance
    # launch_new_instance()
    #from IPython import embed
    #from IPython.external.path import path
    # embed()
    #raise SystemExit
    raise ImportError
except ImportError:
    # Clever trick to add history support and tab completion to cPython.
    # This was stolen from a fellow ubuntero's blog and extended to add
    # more error checking along with the ability to be ran system-wide.
    #
    # Save as /etc/pythonrc and put 'export PYTHONSTARTUP=/etc/pythonrc' in
    # /etc/bash.bashrc. This makes the functionality available system-wide.
    #
    # Cleaned up 7/11/2009 by Jeff Schroeder <jeffschroeder@computer.org>
    # Released under the public domain for all to share and share alike.

    # See:
    #  http://www.digitalprognosis.com/opensource/scripts/pythonrc

    try:
        import readline
    except ImportError:
        readline = None

    if readline is not None:
        # tab completion
        import rlcompleter

        class irlcompleter(rlcompleter.Completer):

            def complete(self, text, state):
                if text == "":
                    readline.insert_text('\t')
                    return None
                else:
                    return rlcompleter.Completer.complete(self, text, state)

        readline.parse_and_bind("tab: complete")
        readline.set_completer(irlcompleter().complete)

        # Restore command-line history, and save it when Python exits.
        import atexit
        import os
        import os.path
        historyPath = os.path.expanduser(
            os.path.join(
                os.environ.get('VIRTUAL_ENV', '~'),
                ".pyhistory"))

        if not os.path.exists(historyPath) and not os.path.isdir(historyPath):
            try:
                open(historyPath, 'w').close()
            # Ignore things if historyPath is not writable
            except IOError:
                pass

        if os.access(historyPath, os.W_OK):
            atexit.register(
                lambda x=historyPath, readline=readline: readline.write_history_file(x))
        else:
            sys.stderr.write("error: could not access %r\n" % historyPath)

        if os.access(historyPath, os.R_OK):
            readline.read_history_file(historyPath)
